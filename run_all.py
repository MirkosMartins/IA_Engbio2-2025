#!/usr/bin/env python3
"""
Script principal para executar todo o pipeline do projeto
√Årvore de Decis√£o para Classifica√ß√£o de C√¢ncer de Mama
"""

import os
import sys
import subprocess
from pathlib import Path

def run_script(script_path, description):
    """Executa um script Python e exibe o status"""
    print(f"\n{'='*60}")
    print(f"üîÑ {description}")
    print(f"{'='*60}")
    
    try:
        # Mudar para o diret√≥rio do script
        script_dir = os.path.dirname(script_path)
        original_dir = os.getcwd()
        
        if script_dir:
            os.chdir(script_dir)
        
        # Executar o script
        result = subprocess.run([sys.executable, os.path.basename(script_path)], 
                              capture_output=True, text=True)
        
        # Voltar ao diret√≥rio original
        os.chdir(original_dir)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - CONCLU√çDO COM SUCESSO")
            print(result.stdout)
        else:
            print(f"‚ùå {description} - ERRO")
            print(f"Erro: {result.stderr}")
            print(f"Output: {result.stdout}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar {description}: {str(e)}")
        return False
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("üß¨ √ÅRVORE DE DECIS√ÉO PARA CLASSIFICA√á√ÉO DE C√ÇNCER DE MAMA")
    print("üë®‚Äçüéì Autor: Kalleby Evangelho")
    print("üè´ UFN 2025 - IA em Sa√∫de - Engenharia Biom√©dica")
    print("\nüöÄ Iniciando execu√ß√£o completa do projeto...")
    
    # Definir scripts na ordem de execu√ß√£o
    scripts = [
        {
            'path': 'src/scripts/load_dataset.py',
            'description': 'Carregando dataset do UCI ML Repository'
        },
        {
            'path': 'src/scripts/prepare_data.py',
            'description': 'Preparando e analisando dados'
        },
        {
            'path': 'src/scripts/build_decision_tree.py',
            'description': 'Construindo e treinando √°rvore de decis√£o'
        },
        {
            'path': 'src/scripts/evaluate_model.py',
            'description': 'Avaliando modelo e gerando relat√≥rios'
        }
    ]
    
    # Verificar se os scripts existem
    for script in scripts:
        if not Path(script['path']).exists():
            print(f"‚ùå Script n√£o encontrado: {script['path']}")
            return False
    
    # Executar scripts sequencialmente
    success_count = 0
    for script in scripts:
        if run_script(script['path'], script['description']):
            success_count += 1
        else:
            print(f"\n‚ùå Falha na execu√ß√£o. Parando pipeline.")
            break
    
    # Resultado final
    print(f"\n{'='*60}")
    print(f"üìä RESULTADO FINAL")
    print(f"{'='*60}")
    
    if success_count == len(scripts):
        print(f"üéâ PIPELINE CONCLU√çDO COM SUCESSO!")
        print(f"‚úÖ {success_count}/{len(scripts)} scripts executados com sucesso")
        print(f"\nüìÅ Arquivos gerados:")
        print(f"   ‚Ä¢ Modelo treinado: src/models/decision_tree_model.pkl")
        print(f"   ‚Ä¢ Dados processados: src/data/")
        print(f"   ‚Ä¢ Visualiza√ß√µes: assets/images/")
        print(f"   ‚Ä¢ Relat√≥rios: src/data/evaluation_report.txt")
        print(f"\nüåê Para visualizar a landing page:")
        print(f"   ‚Ä¢ Abra o arquivo index.html em um navegador")
        print(f"   ‚Ä¢ Ou execute: python -m http.server 8000")
        print(f"   ‚Ä¢ Acesse: http://localhost:8000")
        
    else:
        print(f"‚ùå PIPELINE FALHOU")
        print(f"‚ö†Ô∏è  {success_count}/{len(scripts)} scripts executados com sucesso")
        print(f"üîß Verifique os erros acima e tente novamente")
    
    return success_count == len(scripts)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
